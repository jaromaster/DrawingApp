{"version":3,"sources":["Components/DrawingArea.js","Components/Tools.js","App.js","index.js"],"names":["DrawingArea","props","penColor","clear","erase","drawCircle","drawRect","drawLine","penWidth","saveToImg","alpha","toString","prevMouseX","prevMouseY","dragStartPos","dragEndPos","id","setup","p5","canvasParentRef","height","document","getElementById","offsetHeight","width","offsetWidth","createCanvas","parent","draw","mouseX","mouseY","save","mouseIsPressed","x","y","checkIfPosInCanvas","noErase","stroke","strokeWeight","line","x1","y1","x2","y2","radius","Math","sqrt","pow","abs","calculateDistance","noStroke","fill","circle","rect","Tools","className","type","onChange","changePenColor","title","changePenWidth","min","max","defaultValue","onClick","clearDrawingArea","changeErase","changeDrawCircle","changeDrawRect","changeDrawLine","changeSaveToImg","changeAlpha","App","useState","setPenColor","setPenWidth","setClear","setErase","setDrawCircle","setDrawRect","setDrawLine","setSaveToImg","setAlpha","resetDrawingMode","e","target","value","setTimeout","parseInt","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.62c56f85.chunk.js","sourcesContent":["import React from 'react'\nimport Sketch from 'react-p5';\nimport \"./DrawingArea.css\";\n\n// DrawingArea uses Sketch to draw to canvas\nconst DrawingArea = (props) => {\n    let penColor = props.penColor;\n    let clear = props.clear;\n    let erase = props.erase;\n    let drawCircle = props.drawCircle;\n    let drawRect = props.drawRect;\n    let drawLine = props.drawLine;\n    let penWidth = props.penWidth;\n    let saveToImg = props.saveToImg;\n    let alpha = props.alpha.toString(16); // hex string (to simply append it to penColor)\n    let prevMouseX = 0;\n    let prevMouseY = 0;\n\n    let dragStartPos = [0,0]; // where user starts dragging\n    let dragEndPos = [0,0]; // last position drag\n\n    const setup = (p5, canvasParentRef) => {\n        const height = document.getElementById(\"drawingArea\").offsetHeight;\n        const width = document.getElementById(\"drawingArea\").offsetWidth;\n        p5.createCanvas(width, height).parent(canvasParentRef);\n    }\n\n    const checkIfPosInCanvas = (x, y) => {\n        const height = document.getElementById(\"drawingArea\").offsetHeight;\n        const width = document.getElementById(\"drawingArea\").offsetWidth;\n        if (x <= width && y <= height && x >= 0 && y >= 0){\n            return true;\n        }\n        return false;\n    }\n\n    // calculate distance between two points\n    const calculateDistance = (x1,y1,x2,y2) => {\n        return Math.sqrt(Math.pow(Math.abs(x1-x2),2) + Math.pow(Math.abs(y1-y2),2))\n    }\n\n    // drawing function\n    const draw = (p5) => {\n        let mouseX = p5.mouseX;\n        let mouseY = p5.mouseY;\n\n        if (clear) {\n            p5.clear();\n            clear = false;\n        } else if (saveToImg) {\n            p5.save(\"image.png\");\n            saveToImg = false;\n        }\n\n\n        // if mouse pressed and in canvas\n        // check if mode (erase, circle, rect, line) activated\n        if (p5.mouseIsPressed && checkIfPosInCanvas(mouseX, mouseY)){\n            if (erase) {\n                p5.erase();\n            }else{\n                p5.noErase();\n            }\n            // dragging in [circle, rect, line] mode\n            if (drawCircle || drawRect || drawLine) {\n                if (dragStartPos[0] === 0 && dragStartPos[1] === 0){\n                    dragStartPos = [mouseX, mouseY];\n                }\n                dragEndPos = [mouseX, mouseY];\n            // standard drawing\n            }else{\n                // p5.stroke(penColor + alpha);\n                p5.stroke(penColor);\n                p5.strokeWeight(penWidth);\n                p5.line(mouseX, mouseY, prevMouseX, prevMouseY);\n            }\n        }\n\n        // player stopped dragging (mouse not pressed and dragEndPos not default value)\n        if (!p5.mouseIsPressed && dragEndPos[0] !== 0 && dragEndPos[1] !== 0) {\n            // x1, y1 = starting coordinate of drag\n            const x1 = dragStartPos[0];\n            const y1 = dragStartPos[1];\n            // x2, y2 = last coordinate of drag\n            const x2 = dragEndPos[0];\n            const y2 = dragEndPos[1];\n\n            // if player stopped dragging in circle mode, draw circle\n            if (drawCircle) {\n                const radius = calculateDistance(x1,y1,x2,y2) // distance between starting position, ending position\n\n                // draw circle\n                p5.noStroke();\n                p5.fill(penColor + alpha);\n                p5.circle((x1+x2)/2, (y1+y2)/2, radius); // draw circle \n                dragStartPos = [0, 0]; // reset drag start position\n                dragEndPos = [0, 0]; // reset drag end position\n\n            // if player stopped dragging in rect mode, draw rect\n            } else if (drawRect){\n\n                // draw rectangle\n                p5.noStroke();\n                p5.fill(penColor + alpha);\n                p5.rect(x1, y1, x2-x1, y2-y1); // draw rectangle\n                dragStartPos = [0, 0]; // reset drag start position\n                dragEndPos = [0, 0]; // reset drag end position\n\n            // if player stopped dragging in line mode, draw line\n            } else if (drawLine) {\n\n                // draw line\n                p5.stroke(penColor + alpha);\n                p5.strokeWeight(penWidth);\n                p5.line(x1, y1, x2, y2) // draw line\n                dragStartPos = [0, 0]; // reset drag start position\n                dragEndPos = [0, 0]; // reset drag end position\n            }\n        }\n\n        // update previous mouse position\n        prevMouseX = p5.mouseX;\n        prevMouseY = p5.mouseY;\n    }\n\n\n\n    return (\n        <div id=\"drawingArea\">\n            <Sketch setup={setup} draw={draw}/>\n        </div>\n    )\n}   \n\nexport default DrawingArea;","import React from 'react'\nimport \"./Tools.css\";\n\n// Tools contains input fields like buttons and color inputs\n// handles color changes, line width changes ...\nconst Tools = (props) => {\n    const minPenWidth = 1;\n    const maxPenWidth = 30;\n    const minAlpha = 0;\n    const maxAlpha = 255;\n\n    return (\n        <div id=\"tools\">\n            <input className=\"toolsInput\" id=\"firstInToolbar\" type=\"color\" onChange={props.changePenColor} title=\"change pen color\"></input>\n            <input className=\"toolsInput\" type=\"number\" onChange={props.changePenWidth} min={minPenWidth} max={maxPenWidth} defaultValue={5} title=\"change pen width\"></input>\n            <button className=\"toolsButton\" onClick={props.clearDrawingArea} title=\"clear screen\">CLEAR</button>\n            <button className=\"toolsButton\" onClick={props.changeErase} title=\"erase mode\">{props.erase ? \"ERASE (ON)\" : \"ERASE\"}</button> {/* toggle erase mode*/}\n            <button className=\"toolsButton\" onClick={props.changeDrawCircle} title=\"drag to draw circle\">{props.drawCircle ? \"CIRCLE (ON)\" : \"CIRCLE\"}</button> {/* toggle circle mode*/}\n            <button className=\"toolsButton\" onClick={props.changeDrawRect} title=\"drag to draw rectangle\">{props.drawRect ? \"RECT (ON)\" : \"RECT\"}</button> {/* toggle rectangle mode*/}\n            <button className=\"toolsButton\" onClick={props.changeDrawLine} title=\"drag to draw line\">{props.drawLine ? \"LINE (ON)\" : \"LINE\"}</button> {/* toggle line mode*/}\n            <button className=\"toolsButton\" onClick={props.changeSaveToImg} title=\"save canvas as image\">SAVE</button> {/* save as image (PNG) */}\n            <input className=\"toolsInput\" type=\"number\" onChange={props.changeAlpha} min={minAlpha} max={maxAlpha} defaultValue={maxAlpha} title=\"set shape transparency\"></input>\n        </div>\n    )\n}\n\nexport default Tools;","import './App.css';\nimport React, { useState } from 'react'\nimport DrawingArea from './Components/DrawingArea';\nimport Tools from \"./Components/Tools\";\n\n\nfunction App() {\n  // states\n  const [penColor, setPenColor] = useState(\"#000000\");\n  const [penWidth, setPenWidth] = useState(5);\n  const [clear, setClear] = useState(false);\n  const [erase, setErase] = useState(false);\n  const [drawCircle, setDrawCircle] = useState(false);\n  const [drawRect, setDrawRect] = useState(false);\n  const [drawLine, setDrawLine] = useState(false);\n  const [saveToImg, setSaveToImg] = useState(false);\n  const [alpha, setAlpha] = useState(255);\n\n\n  // set all drawing modes (circle, rect, line) to false\n  const resetDrawingMode = () => {\n    setDrawCircle(false);\n    setDrawRect(false);\n    setDrawLine(false);\n  }\n\n  // update pen color\n  const changePenColor = (e) => {\n    setPenColor(e.target.value); // hex string\n  }\n\n  // update pen width\n  const changePenWidth = (e) => {\n    setPenWidth(parseInt(e.target.value));\n  }\n\n  // clear canvas\n  const clearDrawingArea = (e) => {\n    setClear(true);\n    setTimeout(()=>setClear(false), 10); // wait for setClear to take effect\n  }\n\n  // toggle erase mode\n  const changeErase = (e) => {\n    resetDrawingMode();\n    setErase(!erase);\n  }\n\n  // toggle circle drawing\n  const changeDrawCircle = (e) => {\n    resetDrawingMode();\n    setDrawCircle(!drawCircle);\n  }\n\n  // toggle rect drawing\n  const changeDrawRect = (e) => {\n    resetDrawingMode();\n    setDrawRect(!drawRect);\n  }\n\n  // toggle line drawing\n  const changeDrawLine = (e) => {\n    resetDrawingMode();\n    setDrawLine(!drawLine);\n  }\n\n  // toggle save file\n  const changeSaveToImg = (e) => {\n    setSaveToImg(true);\n    setTimeout(()=> setSaveToImg(false), 10); // wait for setSaveToImg to take effect\n  }\n\n  // update alpha value\n  const changeAlpha = (e) => {\n    setAlpha(parseInt(e.target.value));\n  }\n\n\n  return (\n    <div className=\"App\">\n      <h1>Drawing App</h1>\n\n      <Tools changePenColor={changePenColor} clearDrawingArea={clearDrawingArea} changePenWidth={changePenWidth} changeErase={changeErase} erase={erase}\n      changeDrawCircle={changeDrawCircle} drawCircle={drawCircle} changeDrawRect={changeDrawRect} drawRect={drawRect}\n      changeDrawLine={changeDrawLine} drawLine={drawLine} changeSaveToImg={changeSaveToImg} changeAlpha={changeAlpha}/>\n      <DrawingArea penColor={penColor} clear={clear} penWidth={penWidth} erase={erase} drawCircle={drawCircle} drawRect={drawRect} drawLine={drawLine} saveToImg={saveToImg} alpha={alpha}/>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}